# Дополнительное практическое задание по модулю: "Наследование классов."
#
# Цель: Применить знания полученные в модуле, решив задачу повышенного уровня сложности
#
# Задание "Они все так похожи":
# 2D? 3D? Даже 4D?.... Настолько глубоко мы заходить конечно же не будем, 4D подождёт, но вот с двумерными
# и трёхмерными фигурами можем поэкспериментировать.
# Вы когда-нибудь задумывались как устроены графические библиотеки для языков программирования?
# Безусловно, там выполняются огромные расчёты при помощи вашей видеокарты, но...
# Что лежит в основе удобного использования таких объектов?
#
# По названию задачи можно понять, что все геометрические фигуры обладают схожими свойствами,
# такими как: длины сторон, цвет и др. Давайте попробуем реализовать простейшие классы для некоторых
# таких фигур и при этом применить наследование (в будущем, изучая сторонние библиотеки, вы будете
# замечать схожие классы, уже написанные кем-то ранее):
#
# Общее ТЗ:
# Реализовать классы Figure(родительский), Circle, Triangle и Cube, объекты которых будут обладать
# методами изменения размеров, цвета и т.д. Многие атрибуты и методы должны быть инкапсулированы и для них
# должны быть написаны интерфейсы взаимодействия (методы) - геттеры и сеттеры.
#
# Подробное ТЗ:
# Атрибуты класса Figure: sides_count = 0
# Каждый объект класса Figure должен обладать следующими атрибутами:
#     1. Атрибуты(инкапсулированные): __sides(список сторон (целые числа)), __color(список цветов в формате RGB)
#     2. Атрибуты(публичные): filled(закрашенный, bool)
# И методами:
#    1. Метод get_color, возвращает список RGB цветов.
#    2. Метод __is_valid_color - служебный, принимает параметры r, g, b, который проверяет корректность
#       переданных значений перед установкой нового цвета. Корректным цвет: все значения r, g и b - целые числа
#       в диапазоне от 0 до 255 (включительно).
#    3. Метод set_color принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие значения,
#       предварительно проверив их на корректность. Если введены некорректные данные, то цвет остаётся прежним.
#    4. Метод __is_valid_sides - служебный, принимает неограниченное кол-во сторон,
#       возвращает True, если все стороны целые положительные числа и кол-во новых сторон совпадает с текущим,
#       False - во всех остальных случаях.
#    5. Метод get_sides должен возвращать значение атрибута __sides.
#    6. Метод __len__ должен возвращать периметр фигуры.
#    7. Метод set_sides(self, *new_sides) должен принимать новые стороны,
#       если их количество не равно sides_count, то не изменять, в противном случае - менять.
#
# Атрибуты класса Circle: sides_count = 1
# Каждый объект класса Circle должен обладать следующими атрибутами и методами:
#     1. Все атрибуты и методы класса Figure
#     2. Атрибут __radius, рассчитать исходя из длины окружности (одной единственной стороны).
#     3. Метод get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).
#
# Атрибуты класса Triangle: sides_count = 3
# Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
#     1. Все атрибуты и методы класса Figure
#     2. Метод get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)
#
# Атрибуты класса Cube: sides_count = 12
# Каждый объект класса Cube должен обладать следующими атрибутами и методами:
#     1. Все атрибуты и методы класса Figure.
#     2. Переопределить __sides сделав список из 12 одинаковы сторон (передаётся 1 сторона)
#     3. Метод get_volume, возвращает объём куба.
#
# ВАЖНО!
# При создании объектов делайте проверку на количество переданных сторон, если сторон не ровно sides_count,
# то создать массив с единичными сторонами и в том кол-ве, которое требует фигура.
# Пример 1: Circle((200, 200, 100), 10, 15, 6), так как сторона у круга всего 1, то его стороны будут - [1]
# Пример 2: Triangle((200, 200, 100), 10, 6), так как сторон у треугольника 3, то его стороны будут - [1, 1, 1]
# Пример 3: Cube((200, 200, 100), 9), так как сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, 9, ....., 9] (12)
# Пример 4: Cube((200, 200, 100), 9, 12), так как сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, 1, ....., 1]
#
# Код для проверки:
# circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
# cube1 = Cube((222, 35, 130), 6)
#
# # Проверка на изменение цветов:
# circle1.set_color(55, 66, 77) # Изменится
# print(circle1.get_color())
# cube1.set_color(300, 70, 15) # Не изменится
# print(cube1.get_color())
#
# # Проверка на изменение сторон:
# cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
# print(cube1.get_sides())
# circle1.set_sides(15) # Изменится
# print(circle1.get_sides())
#
# # Проверка периметра (круга), это и есть длина:
# print(len(circle1))
#
# # Проверка объёма (куба):
# print(cube1.get_volume())
#
# Выходные данные (консоль):
#
# [55, 66, 77]
# [222, 35, 130]
# [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
# [15]
# 15
# 216
#
# Примечания (рекомендации):
#     1. Рекомендуется сделать дополнительные (свои проверки) работы методов объектов каждого класса.
#     2. Делайте каждый класс и метод последовательно и проверяйте работу каждой части отдельно.
#     3. Для проверки принадлежности к типу рекомендуется использовать функцию isinstance.
#     4. Помните, служебные инкапсулированные методы можно и нужно использовать только внутри текущего класса.
#     5. Вам не запрещается вводить дополнительные атрибуты и методы, творите, но не переборщите!

import math  # для использования функции импортировать библиотеку math


class Figure:
    sides_count = 0     # количество сторон, переопределяется в
                        # Circle: sides_count = 1
                        # Triangle: sides_count = 3
                        # Cube: sides_count = 12

    __color = tuple()   # список цветов в формате RGB
    __sides = tuple()   # список сторон, целые числа
    filled = False      # закрашенный, bool

    def __init__(self, r, g, b, *new_sides):
        self.__color = 0, 0, 0
        self.filled = False

        if self.__is_valid_color(r, g, b):
            self.__color = r, g, b

        if self.__is_valid_sides(*new_sides):
            self.__sides = new_sides
        else:
            self.__sides = (1,) * self.sides_count

    @staticmethod
    def __is_valid_color(r, g, b):
        # Проверяет корректность переданных значений.
        # Все значения r, g и b - целые числа в диапазоне от 0 до 255
        test_color = True
        for color in r, g, b:
            test_color = test_color and 0 <= color <= 255 and isinstance(color, int)
        return test_color

    def get_color(self):  # Возвращает список RGB цветов.
        return self.__color

    def set_color(self, r, g, b):
        # Принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие значения,
        # предварительно проверив их на корректность. Если введены некорректные данные, то цвет остаётся прежним.
        if self.__is_valid_color(r, g, b):
            self.__color = r, g, b

    def __is_valid_sides(self, *new_sides):
        # Принимает неограниченное кол-во сторон, возвращает True, если все стороны
        # целые положительные числа и кол-во новых сторон совпадает с текущим,
        # False - во всех остальных случаях.
        if len(new_sides) != self.sides_count:
            test_sides = False
        else:
            test_sides = True
            for side in new_sides:
                test_sides = test_sides and 0 < side and isinstance(side, int)
        return test_sides

    def get_sides(self):  # Возвращает значение атрибута __sides.
        return self.__sides

    def set_sides(self, *new_sides):
        # Принимает новые стороны, если их количество не равно sides_count, то не изменять,
        # в противном случае - менять.
        if self.__is_valid_sides(*new_sides):
            self.__sides = new_sides

    def __len__(self):  # Периметр фигуры. Периметр куба это что? Сумма длин всех ребер?
        return sum(self.__sides)


class Circle(Figure):
    # Пример 1: Circle((200, 200, 100), 10, 15, 6) так как сторона у круга всего 1, то его стороны будут - [1].
    sides_count = 1
    __radius = 0

    def __init__(self, r, g, b, *new_sides):
        super().__init__(r, g, b, *new_sides)
        circumference = super().get_sides()[0]
        self.__radius = circumference / (2 * math.pi)

    def get_square(self):  # Возвращает площадь круга.
        circumference = self.get_sides()[0]
        s_circ = math.pow(circumference, 2) / (4 * math.pi)
        return s_circ


class Triangle(Figure):
    # Пример 2: Triangle((200, 200, 100), 10, 6), так как сторон у треугольника 3, то его стороны будут - [1, 1, 1]
    sides_count = 3

    def get_square(self):  # Возвращает площадь треугольника.
        a, b, c = self.get_sides()
        p = len(self) / 2
        s = math.sqrt(p * (p - a) * (p - b) * (p - c))
        return s


class Cube(Figure):
    # Пример 3: Cube((200, 200, 100), 9), так как сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, ..., 9] (12)
    # Пример 4: Cube((200, 200, 100), 9, 12), так как сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, ..., 1]
    sides_count = 12

    def __init__(self, r, g, b, *new_sides):
        if len(new_sides) == 1:
            super().__init__(r, g, b, *new_sides * 12)
        else:
            super().__init__(r, g, b, *new_sides)

    def reset_sides(self, side):  # Переопределяет __sides, сделав список из 12 одинаковы сторон.
        self.set_sides(*((side,) * 12))

    def get_volume(self):  # Возвращает объём куба.
        edge = self.get_sides()[0]
        return math.pow(edge, 3)


# Отладка
# if __name__ == '__main__':

    # fig1 = Figure(0, 0, 0, )
    # fig2 = Figure(-1, 0, 0, )
    # fig3 = Figure(0, 100, 255, )
    # fig4 = Figure(0, 100, 256, )
    # fig5 = Figure(-255, -1, -100, )
    # fig6 = Figure(200, 200, 100 )
    # fig7 = Figure(200, 200, 100, 10)
    # fig8 = Figure(200, 200, 100, 10, 15)
    # fig9 = Figure(200, 200, 100, 10, 15, 6)


    # Пример 1: Circle((200, 200, 100), 10, 15, 6), так как сторона у круга всего 1, то его стороны будут - [1]
    # cir1 = Circle(10, 20, 30, 9)
    # cir2 = Circle(10, 20, 100, 15)
    # circ = Circle(10, 20, 30, 100, 150)
    # circ = Circle(10, 20, 30, 100)
    #
    # c_count = circ.sides_count
    #
    # c_color = circ.get_color()
    # circ.set_color(40, 50, 60)
    # c_color = circ.get_color()
    #
    # circ = Circle(10, 20, 30, 100)
    # c = circ.sides_count
    # s = circ.get_square()
    # l = len(circ)
    #
    # circ.set_sides(13)
    # l = len(circ)
    # s = circ.get_square()
    #
    #

    # Пример 2: Triangle((200, 200, 100), 10, 6), так как сторон у треугольника 3, то его стороны будут - [1, 1, 1]
    # tria1 = Triangle(200, 200, 200, 3)
    # tria2 = Triangle(200, 200, 200, 3, 4)
    # tria = Triangle(200, 200, 200, 3, 4, 5)
    # t_count = tria.sides_count
    # t_len = len(tria)
    #
    # t_color = tria.get_color()
    # tria.set_color(10, 20, 30)
    # t_color = tria.get_color()
    #
    # tria.set_sides(3, 4, 5)
    # t_sides = tria.get_sides()
    # t_sqr = tria.get_square()
    #
    # tria = Triangle(200, 200, 200, 3, 4, 5)
    # t_sides = tria.get_sides()
    # t_sqr = tria.get_square()
    # t_len = len(tria)
    #
    # tria.set_sides(9, 10, 11)
    # t_sides = tria.get_sides()
    # t_sqr = tria.get_square()
    #

    # Пример 3: Cube((200, 200, 100), 9), так как сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, 9, ....., 9] (12)
    # cub1 = Cube(200, 200, 100, 9)
    # b_len = len(cub1)
    # b_vol = cub1.get_volume()
    #
    # cub1.set_sides( *((2,) * 12))
    # b_len = len(cub1)
    # b_vol = cub1.get_volume()
    #
    # cub1.reset_sides(3)
    # b_len = len(cub1)
    # b_vol = cub1.get_volume()
    #
    # Пример 4: Cube((200, 200, 100), 9, 12), так как сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, 1, ....., 1]


# Отладка
if __name__ == '__main__':
    # Код для проверки:
    circle1 = Circle(200, 200, 100, 10) # (Цвет, стороны)
    cube1 = Cube(222, 35, 130, 6)

    # # Проверка на изменение цветов:
    circle1.set_color(55, 66, 77) # Изменится
    print(circle1.get_color())
    cube1.set_color(300, 70, 15) # Не изменится
    print(cube1.get_color())

    # # Проверка на изменение сторон:
    cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
    print(cube1.get_sides())
    circle1.set_sides(15) # Изменится
    print(circle1.get_sides())

    # # Проверка периметра (круга), это и есть длина:
    print(len(circle1))

    # # Проверка объёма (куба):
    print(cube1.get_volume())

# Выходные данные (консоль):
#
# [55, 66, 77]
# [222, 35, 130]
# [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
# [15]
# 15
# 216
#
