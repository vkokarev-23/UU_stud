# Домашнее задание по теме "Доступ к свойствам родителя. Переопределение свойств"
#
# Цели: Применить сокрытие атрибутов и повторить наследование. Рассмотреть на примере объекта из реального мира.
#
# Задача "Изменять нельзя получать":
# В этой задаче мы реализуем классы транспорта, в которых нельзя будет просто так поменять цвет,
# мощность двигателя и прочие свойства, так как в реальной жизни это чаще всего делается не владельцем,
# а в специальных сервисах. Да, узнать значения этих свойств мы сможем, но вот изменить - нет.
#
# Вам необходимо создать 2 класса: Vehicle и Sedan, где Vehicle - это любой транспорт,
# а Sedan (седан) - наследник класса Vehicle.
#
# I. Каждый объект Vehicle должен содержать следующие атрибуты объекта:
#     1. Атрибут owner(str) - владелец транспорта. (владелец может меняться)
#     2. Атрибут __model(str) - модель (марка) транспорта. (мы не можем менять название модели)
#     3. Атрибут __engine_power(int) - мощность двигателя. (мы не можем менять мощность двигателя самостоятельно)
#     4. Атрибут __color(str) - название цвета. (мы не можем менять цвет автомобиля своими руками)
#
# А так же атрибут класса:
#     Атрибут класса __COLOR_VARIANTS, в который записан список допустимых цветов для окрашивания. (Цвета написать свои)
#
# Каждый объект Vehicle должен содержать следующий методы:
#     1. Метод get_model - возвращает строку: "Модель: <название модели транспорта>"
#     2. Метод get_horsepower - возвращает строку: "Мощность двигателя: <мощность>"
#     3. Метод get_color - возвращает строку: "Цвет: <цвет транспорта>"
#     4. Метод print_info - распечатывает результаты методов (в том же порядке): get_model, get_horsepower, get_color;
#     а так же владельца в конце в формате "Владелец: <имя>"
#     5. Метод set_color - принимает аргумент new_color(str), меняет цвет __color на new_color,
#        если он есть в списке __COLOR_VARIANTS, в противном случае выводит на экран надпись:
#        "Нельзя сменить цвет на <новый цвет>".
#
# Взаимосвязь методов и скрытых атрибутов:
#     1. Методы get_model, get_horsepower, get_color находятся в одном классе с соответствующими им
#        атрибутами: __model, __engine_power, __color. Поэтому атрибуты будут доступны для методов.
#     2. Атрибут класса __COLOR_VARIANTS можно получить обращаясь к нему через объект(self).
#     3. Проверка в __COLOR_VARIANTS происходит не учитывая регистр ('BLACK' ~ 'black').
#
# II. Класс Sedan наследуется от класса Vehicle, а так же содержит следующие атрибуты:
#     1. Атрибут __PASSENGERS_LIMIT = 5 (в седан может поместиться только 5 пассажиров)
#
# Пункты задачи:
#     1. Создайте классы Vehicle и Sedan.
#     2. Напишите соответствующие свойства в обоих классах.
#     3. Не забудьте сделать Sedan наследником класса Vehicle.
#     4. Создайте объект класса Sedan и проверьте, как работают все его методы, взяты из класса Vehicle.
#
# Пример результата выполнения программы. Исходный код:
# # Текущие цвета __COLOR_VARIANTS = ['blue', 'red', 'green', 'black', 'white']
# vehicle1 = Sedan('Theodore', 'Toyota Mark II', 'blue', 500)
#
# # Изначальные свойства
# vehicle1.print_info()
#
# # Меняем свойства (в том числе вызывая методы)
# vehicle1.set_color('Pink')
# vehicle1.set_color('BLACK')
# vehicle1.owner = 'Vasyok'
#
# # Проверяем что поменялось
# vehicle1.print_info()
#
# Вывод на консоль:
# Модель: Toyota Mark II
# Мощность двигателя: 500
# Цвет: blue
# Владелец: Theodore
# Нельзя сменить цвет на Pink
# Модель: Toyota Mark II
# Мощность двигателя: 500
# Цвет: BLACK
# Владелец: Vasyok
#
# Примечания:
#     1. Обращайте особое внимание на условия задачи: что является атрибутом класса, а что атрибутом объекта.
#     2. Методы, где описано получение/перезапись каких-либо атрибутов рекомендуется начинать со слов
#        get и set соответственно. Такие методы часто используются для доступа к скрытым атрибутам и
#        позволяют написать дополнительную логику(код) при их получении/изменении.
#     3. Не забывайте использовать self при обращении к атрибутам объекта.
#     4. Константные(постоянные) значения в Python принято писать полностью в верхнем регистре (CapsLock),
#        как в случае списка цветов или количеством пассажиров.

class Vehicle:

    # Атрибут класса __COLOR_VARIANTS, в который записан список допустимых цветов для окрашивания. Цвета написать свои.
    __COLOR_VARIANTS = ('orange', 'turquoise', 'carmine', 'ocher', 'silver', 'golden',
                        'lavender', 'red', 'green', 'blue', 'yellow', 'black', 'white')

    #   Это атрибуты ОБЪЕКТА, но не КЛАССА.
    # owner = ''         # Владелец транспорта, владелец может меняться.
    # __model = ''       # Модель (марка) транспорта, мы не можем менять название модели.
    # __engine_power = 0 # Мощность двигателя, мы не можем менять мощность двигателя самостоятельно.
    # __color = ''       # Название цвета, мы не можем менять цвет автомобиля своими руками.

    # vehicle1 = Sedan('Theodore', 'Toyota Mark II', 'blue', 500)
    def __init__(self, new_owner, model, color, engine_power):
        self.owner = new_owner
        self.__model = model
        self.__engine_power = engine_power
        self.__color = color

    # 1. Метод get_model - возвращает строку: "Модель: <название модели транспорта>"
    def get_model(self):
        return f'Модель: {self.__model}'

    # 2. Метод get_horsepower - возвращает строку: "Мощность двигателя: <мощность>"
    def get_horsepower(self):
        return f'Мощность двигателя: {self.__engine_power}'


    # 3. Метод get_color - возвращает строку: "Цвет: <цвет транспорта>"
    def get_color(self):
        return f'Цвет: {self.__color}'


    # 4. Метод print_info - распечатывает результаты методов (в том же порядке):
    # get_model, get_horsepower, get_color; а так же владельца в конце в формате "Владелец: <имя>"
    def print_info(self):
        print(self.get_model())
        print(self.get_horsepower())
        print(self.get_color())
        print(f'Владелец: {self.owner}')

    # 5. Метод set_color - принимает аргумент new_color(str), меняет цвет __color на new_color,
    #    если он есть в списке __COLOR_VARIANTS, в противном случае выводит на экран надпись:
    #   "Нельзя сменить цвет на <новый цвет>".
    def set_color(self, new_color):
        color_any = list(self.__COLOR_VARIANTS)
        color_upp = [x.upper() for x in color_any]
        if new_color.upper() in color_upp:
            self.__color = new_color
        else:
            print(f'Нельзя сменить цвет на {new_color}')


class Sedan(Vehicle):
    # 1. Атрибут __PASSENGERS_LIMIT = 5 (в седан может поместиться только 5 пассажиров)
    __PASSENGERS_LIMIT = 5


if __name__ == '__main__':
    vehicle1 = Sedan('Theodore', 'Toyota Mark II', 'blue', 500)

    # Изначальные свойства
    vehicle1.print_info()

    # Меняем свойства (в том числе вызывая методы)
    vehicle1.set_color('Pink')
    vehicle1.set_color('BLACK')
    vehicle1.owner = 'Vasyok'

    # Проверяем что поменялось
    vehicle1.print_info()

# Вывод на консоль:
# Модель: Toyota Mark II
# Мощность двигателя: 500
# Цвет: blue
# Владелец: Theodore
# Нельзя сменить цвет на Pink
# Модель: Toyota Mark II
# Мощность двигателя: 500
# Цвет: BLACK
# Владелец: Vasyok
