# Домашнее задание по теме "Сложные моменты и исключения в стеке вызовов функции"
# Ваша задача:
# понять как работают исключения внутри функций и как обрабатываются эти исключения на практике при помощи try-except.
#
# Задача "План перехват":
# Напишите 2 функции:
#
# Функция personal_sum(numbers):
#     1. Должна принимать коллекцию numbers.
#     2. Подсчитывать сумму чисел в numbers путём перебора и увеличивать переменную result.
#     3. Если же при переборе встречается данное типа отличного от числового,
#        то обработать исключение TypeError, увеличив счётчик incorrect_data на 1.
#     4. В конечном итоге функция возвращает кортеж из двух значений: result - сумма чисел,
#        incorrect_data - кол-во некорректных данных.
#
# Функция calculate_average(numbers):
# Среднее арифметическое - сумма всех данных делённая на их количество.
#     1. Должна принимать коллекцию numbers и возвращать: среднее арифметическое всех чисел.
#     2. Внутри для подсчёта суммы используйте функцию personal_sum написанную ранее.
#     3. Так как коллекция numbers может оказаться пустой, то обработайте исключение ZeroDivisionError
#        при делении на 0 и верните 0.
#     4. Также в numbers может быть записана не коллекция, а другие типы данных, например числа.
#        Обработайте исключение TypeError выводя строку 'В numbers записан некорректный тип данных'.
#        В таком случае функция просто вернёт None.
# #
# Пункты задачи:
#     1. Создайте функцию personal_sum на основе условий задачи.
#     2. Создайте функцию calculate_average на основе условий задачи.
#     3. Вызовите функцию calculate_average несколько раз, передав в неё данные разных вариаций.
#
# Пример результата выполнения программы:
#
# Пример выполнения программы:
# print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип
# print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
# print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
# print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать
#
# Вывод на консоль:
# Некорректный тип данных для подсчёта суммы - 1
# Некорректный тип данных для подсчёта суммы - ,
# Некорректный тип данных для подсчёта суммы -
# Некорректный тип данных для подсчёта суммы - 2
# Некорректный тип данных для подсчёта суммы - ,
# Некорректный тип данных для подсчёта суммы -
# Некорректный тип данных для подсчёта суммы - 3
# Результат 1: 0
# Некорректный тип данных для подсчёта суммы - Строка
# Некорректный тип данных для подсчёта суммы - Ещё Строка
# Результат 2: 2.0
# В numbers записан некорректный тип данных
# Результат 3: None
# Результат 4: 26.5


def personal_sum(numbers):
    incorrect_data = 0
    result = 0

    for item in numbers:
        try:
            result += item
        except TypeError:
            incorrect_data += 1
            print(f'Некорректный тип данных для подсчёта суммы: "{item}"')
    return result, incorrect_data


def calculate_average(numbers):

    if not hasattr(numbers, '__len__'):
        print(f'В numbers записан некорректный тип данных: {type(numbers)}: {numbers}')
        return None

    members = len(numbers)
    total, bad_count = personal_sum(numbers)
    try:
        goods = members - bad_count
        result = total / goods
    except ZeroDivisionError:
        return 0
    except TypeError:
        return None

    return result


if __name__ == '__main__':
    print()
    print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип
    print()
    print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
    print()
    print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
    print()
    print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать
    print()

    # print(f'Результат 5: {calculate_average([])}') # Всё должно работать
    # print()
